---
title: "Creating a Table, Exporting"
format: html
html-table-processing: none
jupyter: python3
---

## Intro

All GT tables begin with using the `GT()` class. There we supply the input data table (a Pandas or Polars DataFrame) and some basic options for creating a stub (`rowname_col`) and row groups (`groupname_col`).

Finally, sometimes we want to export the table to an image format. For that you can use the `save()` method.

------

### Relevant parts of the API

- `GT()`
- `save()`

------


### `GT()`: Create a GT table object

```python
GT(
  data,
  rowname_col = "rowname",
  groupname_col = ,
  rownames_to_stub = FALSE,
  auto_align = TRUE,
  id = NULL,
  locale = NULL,
)
```

The `GT()` class creates a GT table object when provided with table data. Using this function is the first step in a typical GT workflow. Once we have the GT table object, we can perform styling transformations before rendering to a display table.

##### EXAMPLES

The GT package contains a few datasets:

- `countrypops` - Yearly populations of countries from 1960 to 2017
- `sza` - Twice hourly solar zenith angles by month & latitude
- `gtcars` - Deluxe automobiles from the 2014-2017 period
- `sp500` - Daily S&P 500 Index data from 1950 to 2015
- `pizzaplace` - A year of pizza sales from a pizza place
- `exibble` - A toy example tibble for testing with GT: `exibble`
- `towny` - Populations of all municipalities in Ontario from 1996 to 2021
- `metro` - The stations of the Paris Metro

We will use `exibble` frequently during this workshop simply because the entire table easily fits on a screen and contains various types of data (i.e., it's ideal for examples).

Let's print out `exibble` and see what it looks like:

```{python}
from great_tables.data import exibble

exibble
```

Now lets introduce `exibble` to the `GT()` class.

```{python}
from great_tables import GT

GT(exibble)
```

The above is the basic layout, containing the column labels and the body cells. Numbers are minimally formatted (see the `num` column) but we can apply our own specific formatting (in the next module).

We can modify the layout a bit in the first step and create a stub. A stub is a special column that contains row labels/names. To do this, we supply the name of the column we'd like to use as the stub to the `rowname_col` argument. Conveniently, we have the `"row"` column in `exibble` that's good for this purpose:

```{python}
GT(exibble, rowname_col="row")
```

Great! A bit on the *stub*. It doesn't have a column label above it because it's technically not a column. We can still put a label above it though, and this is done with the `tab_stubhead()` function (demo for this in the next module).

We can do some more structuring. Sets of rows can be grouped, showing a *row group label* above each group. We can do this by using a column containing categorical values (usually grouping labels). Conveniently again, `exibble` has the `"group"` column. Let's use that in the `rowname_col` argument of `gt()` and see what it looks like:

```{python}
GT(
  exibble,
  rowname_col="row",
  groupname_col="group"
)
```


------

### `save()`: Save a GT table as a file

```python
save(
  data,
  filename,
  path = NULL,
  ...
)
```

The `save()` method makes it easy to save a GT table to a file. The function assumes the output file type by the extension provided in the output filename. This will produce either an HTML, PDF, PNG, LaTeX, RTF, or docx file.

##### EXAMPLES

Use `exibble` to create a GT table.

```{python}
gt_tbl = GT(
  exibble,
  rowname_col="row",
  groupname_col="group"
)
```

Save a PNG file.

```{python}
gt_tbl.save("tab_1.png")
```

------

### SUMMARY

1. To make a GT table, get your input table in the right arrangement and use `GT()`.
2. The `GT()` class has a few options for adding group rows and a *stub*.
3. You can save a GT table as an image file with `save()` method; you have to name the file in a supported format (e.g., `"gt_table.png"` for a PNG file containing the table).
